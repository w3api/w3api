{
    "description": "Scanner es una clase que nos permite analizar textos mediante patrones para descubrir tipos de datos primitivos en \u00e9l.\nSe le puede configurar un delimitador para saber hasta donde tiene que leer el texto.\n",
    "code": "Scanner reader = new Scanner(System.in);\nSystem.out.println(\"Introduce un texto\");\nSystem.out.println(reader.next());\n",
    "ldc": [
        {
            "nombre": "Calcular el volumen de un cubo con Java",
            "url": "http://lineadecodigo.com/java/calcular-el-volumen-de-un-cubo-con-java/"
        },
        {
            "nombre": "Dividir dos n\u00fameros con Java",
            "url": "http://lineadecodigo.com/java/dividir-dos-numeros-con-java/"
        },
        {
            "nombre": "Calcular signo del zodiaco con Java",
            "url": "http://lineadecodigo.com/java/calcular-signo-del-zodiaco-con-java/"
        },
        {
            "nombre": "Restar dos n\u00fameros con Java",
            "url": "http://lineadecodigo.com/java/restar-dos-numeros-con-java/"
        },
        {
            "nombre": "Calcular el per\u00edmetro de un c\u00edrculo con Java",
            "url": "http://lineadecodigo.com/java/calcular-el-perimetro-de-un-circulo-con-java/"
        },
        {
            "nombre": "Palabras que empiecen por...",
            "url": "http://lineadecodigo.com/java/palabras-que-empiecen-por/"
        },
        {
            "nombre": "Conversor de monedas",
            "url": "http://lineadecodigo.com/java/conversor-de-monedas/"
        }
    ],
    "constructores": [
        {
            "nombre": "Scanner",
            "description": "",
            "parametros": [
                {
                    "nombre": "String source",
                    "description": ""
                },
                {
                    "nombre": "String charsetName",
                    "description": ""
                },
                {
                    "nombre": "Charset charset",
                    "description": ""
                },
                {
                    "nombre": "Readable source",
                    "description": ""
                },
                {
                    "nombre": "ReadableByteChannel source",
                    "description": ""
                },
                {
                    "nombre": "InputStream source",
                    "description": ""
                },
                {
                    "nombre": "File source",
                    "description": ""
                },
                {
                    "nombre": "Path source",
                    "description": ""
                }
            ]
        }
    ],
    "metodos": [
        {
            "nombre": "close",
            "description": ""
        },
        {
            "nombre": "delimiter",
            "description": ""
        },
        {
            "nombre": "findAll",
            "description": "",
            "parametros": [
                {
                    "nombre": "String patString",
                    "description": ""
                },
                {
                    "nombre": "Pattern pattern",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "findInLine",
            "description": "",
            "parametros": [
                {
                    "nombre": "String pattern",
                    "description": ""
                },
                {
                    "nombre": "Pattern pattern",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "findWithinHorizon",
            "description": "",
            "parametros": [
                {
                    "nombre": "Pattern pattern",
                    "description": ""
                },
                {
                    "nombre": "String pattern",
                    "description": ""
                },
                {
                    "nombre": "int horizon",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "hasNext",
            "description": "",
            "parametros": [
                {
                    "nombre": "String pattern",
                    "description": ""
                },
                {
                    "nombre": "Pattern pattern",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "hasNextBigDecimal",
            "description": ""
        },
        {
            "nombre": "hasNextBigInteger",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "hasNextBoolean",
            "description": ""
        },
        {
            "nombre": "hasNextByte",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "hasNextDouble",
            "description": ""
        },
        {
            "nombre": "hasNextFloat",
            "description": ""
        },
        {
            "nombre": "hasNextInt",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "hasNextLine",
            "description": ""
        },
        {
            "nombre": "hasNextLong",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "hasNextShort",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "ioException",
            "description": ""
        },
        {
            "nombre": "locale",
            "description": ""
        },
        {
            "nombre": "match",
            "description": ""
        },
        {
            "nombre": "next",
            "description": "M\u00e9todo que retorna un token del Scanner, desde que empieza a leer hasta que encuentra el delimitador definido por el Scanner.\n",
            "parametros": [
                {
                    "nombre": "String pattern",
                    "description": ""
                },
                {
                    "nombre": "Pattern pattern",
                    "description": ""
                }
            ],
            "code": "Scanner reader = new Scanner(System.in);\nString sTexto = reader.next();\n",
            "ldc": [
                {
                    "nombre": "Palabras que empiecen por...",
                    "url": "http://lineadecodigo.com/java/palabras-que-empiecen-por/"
                }
            ]
        },
        {
            "nombre": "nextBigDecimal",
            "description": ""
        },
        {
            "nombre": "nextBigInteger",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "nextBoolean",
            "description": ""
        },
        {
            "nombre": "nextByte",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "nextDouble",
            "description": ""
        },
        {
            "nombre": "nextFloat",
            "description": "M\u00e9todo que retorna un token del Scanner en formato de n\u00famero decimal long.\nSi los caracteres recuperados no pueden ser convertidos a un n\u00famero decimal se eleva la excepci\u00f3n InputMismatchException.\n",
            "code": "float numero1 = 0;\nfloat numero2 = 0;\nfloat resultado;\n\nScanner reader = new Scanner(System.in);\n\t\t\nSystem.out.println(\"Introduce el primer n\u00famero:\");\t\t\t\nnumero1 = reader.nextFloat();\n\t\t\t\nSystem.out.println(\"Introduce el segundo n\u00famero:\");\nnumero2 = reader.nextFloat();\n\t\t\n// Dividimos\nresultado = numero1/numero2;\n\nSystem.out.println(\"La divisi\u00f3n es \" + numero1 + \" / \" + numero2 + \" = \" + resultado);\n",
            "ldc": [
                {
                    "nombre": "Dividir dos n\u00fameros con Java",
                    "url": "http://lineadecodigo.com/java/dividir-dos-numeros-con-java/"
                }
            ]
        },
        {
            "nombre": "nextInt",
            "description": "M\u00e9todo que retorna un token del Scanner en formato de n\u00famero entero int.\nSi los caracteres recuperados no pueden ser convertidos a un n\u00famero entero se eleva la excepci\u00f3n InputMismatchException.\n",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ],
            "code": "Scanner reader = new Scanner(System.in);\nint iNumero = reader.nextInt();  // Si introducimos un 5, tendremos iNumero = 5\n\nint iNumero = reader.nextInt(2); // Si introducimos un 101, tendremos iNumero = 5.\n",
            "ldc": [
                {
                    "nombre": "Calcular signo del zodiaco con Java",
                    "url": "http://lineadecodigo.com/java/calcular-signo-del-zodiaco-con-java/"
                },
                {
                    "nombre": "Restar dos n\u00fameros con Java",
                    "url": "http://lineadecodigo.com/java/restar-dos-numeros-con-java/"
                }
            ]
        },
        {
            "nombre": "nextLine",
            "description": ""
        },
        {
            "nombre": "nextLong",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "nextShort",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "radix",
            "description": ""
        },
        {
            "nombre": "remove",
            "description": ""
        },
        {
            "nombre": "reset",
            "description": ""
        },
        {
            "nombre": "skip",
            "description": "",
            "parametros": [
                {
                    "nombre": "String pattern",
                    "description": ""
                },
                {
                    "nombre": "Pattern pattern",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "tokens",
            "description": ""
        },
        {
            "nombre": "toString",
            "description": ""
        },
        {
            "nombre": "useDelimiter",
            "description": "",
            "parametros": [
                {
                    "nombre": "String pattern",
                    "description": ""
                },
                {
                    "nombre": "Pattern pattern",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "useLocale",
            "description": "",
            "parametros": [
                {
                    "nombre": "Locale locale",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "useRadix",
            "description": "",
            "parametros": [
                {
                    "nombre": "int radix",
                    "description": ""
                }
            ]
        }
    ]
}