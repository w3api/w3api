{
    "description": "",
    "code": "String[] s = \"Esto es una frase muy interesante\".split(\"\");\nString cadena = IntStream.range(0, s.length)\n  .mapToObj(i -> i%2!=0\u00a0? s[i].toUpperCase():s[i].toLowerCase())\n  .collect(Collectors.joining());\n",
    "ldc": [],
    "metodos": [
        {
            "nombre": "allMatch",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntPredicate predicate",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "anyMatch",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntPredicate predicate",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "asDoubleStream",
            "description": ""
        },
        {
            "nombre": "asLongStream",
            "description": ""
        },
        {
            "nombre": "average",
            "description": ""
        },
        {
            "nombre": "boxed",
            "description": ""
        },
        {
            "nombre": "builder",
            "description": ""
        },
        {
            "nombre": "collect",
            "description": "Realiza una operaci\u00f3n de reducci\u00f3n mutable sobre los elementos del Stream. Una reducci\u00f3n mutable es una en la que el valor reducido es un contenedor resultado mutable, tal como un ArrayList, y los elementos se incorporan mediante la actualizaci\u00f3n del estado del resultado en lugar de mediante la sustituci\u00f3n del resultado. \n",
            "parametros": [
                {
                    "nombre": "ObjIntConsumer<R> accumulator",
                    "description": ""
                },
                {
                    "nombre": "R> combiner",
                    "description": ""
                },
                {
                    "nombre": "Supplier<R> supplier",
                    "description": ""
                },
                {
                    "nombre": "BiConsumer<R",
                    "description": ""
                }
            ],
            "code": "String[] s = \"Esto es una frase muy interesante\".split(\"\");\nString cadena = IntStream.range(0, s.length)\n  .mapToObj(i -> i%2!=0\u00a0? s[i].toUpperCase():s[i].toLowerCase())\n  .collect(Collectors.joining());\n",
            "ldc": []
        },
        {
            "nombre": "concat",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntStream b",
                    "description": ""
                },
                {
                    "nombre": "IntStream a",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "count",
            "description": ""
        },
        {
            "nombre": "distinct",
            "description": ""
        },
        {
            "nombre": "dropWhile",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntPredicate predicate",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "empty",
            "description": ""
        },
        {
            "nombre": "filter",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntPredicate predicate",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "findAny",
            "description": ""
        },
        {
            "nombre": "findFirst",
            "description": ""
        },
        {
            "nombre": "flatMap",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntFunction<? extends IntStream> mapper",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "forEach",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntConsumer action",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "forEachOrdered",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntConsumer action",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "generate",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntSupplier s",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "iterate",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntUnaryOperator next",
                    "description": ""
                },
                {
                    "nombre": "int seed",
                    "description": ""
                },
                {
                    "nombre": "IntUnaryOperator f",
                    "description": ""
                },
                {
                    "nombre": "IntPredicate hasNext",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "limit",
            "description": "",
            "parametros": [
                {
                    "nombre": "long maxSize",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "map",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntUnaryOperator mapper",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "mapToDouble",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntToDoubleFunction mapper",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "mapToLong",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntToLongFunction mapper",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "mapToObj",
            "description": "Obtiene un Stream de objetos resultado de ejecutar la funci\u00f3n del mapper.\n",
            "parametros": [
                {
                    "nombre": "IntFunction<? extends U> mapper",
                    "description": ""
                }
            ],
            "code": "String[] s = \"Esto es una frase muy interesante\".split(\"\");\nString cadena = IntStream.range(0, s.length)\n  .mapToObj(i -> i%2!=0\u00a0? s[i].toUpperCase():s[i].toLowerCase())\n  .collect(Collectors.joining());\n",
            "ldc": []
        },
        {
            "nombre": "max",
            "description": ""
        },
        {
            "nombre": "min",
            "description": ""
        },
        {
            "nombre": "noneMatch",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntPredicate predicate",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "of",
            "description": "",
            "parametros": [
                {
                    "nombre": "int t",
                    "description": ""
                },
                {
                    "nombre": "int... values",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "peek",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntConsumer action",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "range",
            "description": "",
            "parametros": [
                {
                    "nombre": "int startInclusive",
                    "description": ""
                },
                {
                    "nombre": "int endExclusive",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "rangeClosed",
            "description": "",
            "parametros": [
                {
                    "nombre": "int startInclusive",
                    "description": ""
                },
                {
                    "nombre": "int endInclusive",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "reduce",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntBinaryOperator op",
                    "description": ""
                },
                {
                    "nombre": "int identity",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "skip",
            "description": "",
            "parametros": [
                {
                    "nombre": "long n",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "sorted",
            "description": ""
        },
        {
            "nombre": "sum",
            "description": ""
        },
        {
            "nombre": "summaryStatistics",
            "description": ""
        },
        {
            "nombre": "takeWhile",
            "description": "",
            "parametros": [
                {
                    "nombre": "IntPredicate predicate",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "toArray",
            "description": ""
        }
    ]
}