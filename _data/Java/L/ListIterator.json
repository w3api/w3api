{
    "description": "",
    "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\nListIterator<String> it = al.listIterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n\t    \nwhile(it.hasPrevious())\n System.out.println(it.previous());\n",
    "ldc": [],
    "metodos": [
        {
            "nombre": "add",
            "description": "",
            "parametros": [
                {
                    "nombre": "E e",
                    "description": ""
                }
            ]
        },
        {
            "nombre": "hasNext",
            "description": "M\u00e9todo que devuelve true si existe un siguiente elemento a la hora de iterar sobre una colecci\u00f3n.\n",
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\nListIterator<String> it = al.listIterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n\t    \nwhile(it.hasPrevious())\n System.out.println(it.previous());\n",
            "ldc": []
        },
        {
            "nombre": "hasPrevious",
            "description": "M\u00e9todo que devuelve true si existe un elemento anterior a la hora de iterar sobre una colecci\u00f3n.\n",
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\nListIterator<String> it = al.listIterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n\t    \nwhile(it.hasPrevious())\n System.out.println(it.previous());\n",
            "ldc": []
        },
        {
            "nombre": "next",
            "description": "M\u00e9todo que permite recuperar el siguiente elemento dentro de una colecci\u00f3n.\n",
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\nListIterator<String> it = al.listIterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n\t    \nwhile(it.hasPrevious())\n System.out.println(it.previous());\n",
            "ldc": []
        },
        {
            "nombre": "nextIndex",
            "description": ""
        },
        {
            "nombre": "previous",
            "description": "M\u00e9todo que permite recuperar el elemento anterior dentro de una colecci\u00f3n.\n",
            "code": "// ArrayList con tama\u00f1o\nArrayList<String> al = new ArrayList<String>();\n\t\t\n// A\u00f1adir elementos a un ArrayList\nal.add(\"Victor\");\nal.add(\"Luis\");\nal.add(\"Elena\");\t\t\n\t\nListIterator<String> it = al.listIterator();\nwhile(it.hasNext())\n System.out.println(it.next());\n\t    \nwhile(it.hasPrevious())\n System.out.println(it.previous());\n",
            "ldc": []
        },
        {
            "nombre": "previousIndex",
            "description": ""
        },
        {
            "nombre": "remove",
            "description": ""
        },
        {
            "nombre": "set",
            "description": "",
            "parametros": [
                {
                    "nombre": "E e",
                    "description": ""
                }
            ]
        }
    ]
}